#include <iostream>
using namespace std;


// 指向“类数据成员“的指针
// 定义：
// <数据类型> <类名> :: * <指针名>
//
// 赋值 & 初始化:
// <数据类型> <类名> :: *<指针名> [=&<类名>::<非静态数据成员>]
//
// 解引用： 由于类不是运行时, 存在的对象，因此使用这类指针时，需要首先指定类的一个对象，然后通过对象来引用指针所指的成员
// <类对象名> .* <指向非静态数据成员的指针>
// <类对象指针> -> * <指向非静态数据成员的指针>




// 指向 "类成员函数" 的指针
// 定义:
// <数据类型>(<类名>::*<指针名>)(<参数列表>)

// 赋值&初始化:
// <数据类型>(<类名>::*<指针名>)(<参数列表>)[=&<l类名>::<非静态成员函数>]


// 解引用
//(<类对象名>.*<指向非静态成员函数的指针>)(<参数列表>)
//(<类对象名>->*<指向非静态成员函数的指针>)(<参数列表>)


#if 0
int a;
int *p = &a;
void func();
void(*pf)() = &func;

// 类： 数据成员， 函数成员

成员类型  类名:: *指针名  = &类名::成员名
函数返回类型 (类名::*函数指针名)(参数列表) = &类名::成员函数名


// 对象： 数据成员， 函数成员

.*, ->*

对象.*数据成员指针
对象指针->*数据成员指针

(对象.*成员函数指针)()
(对象指针->*成员函数指针)()



#endif

class Stu
{
public:
    Stu(string sn, int ia):
    name(sn), age(ia){}

    void print()
    {
        cout << name << '--' << age << endl;
    }

public:
    string name;
    int age;
};


int main() {
    // 栈上的
    Stu s1("zhaosi", 39);
    Stu s2("zhangsan", 79);

    // 堆上的
    Stu *pp =  new Stu("nigulasikaiqi.zhaosi", 60);



    // pa是个指针，它属于Stu类，类型是int
    string Stu::*pn =   &Stu::name;

    cout << s1.age << '-' << s2.age << endl;

    // 背后实现的过程，，理解为  pn像是记录的偏移量， s1像是班级
    cout << s1.*pn<< '-' << s2.*pn << endl;  // .* 在一起
    cout << pp->*pn  << endl;

    void (Stu::*pf)() =  &Stu::print;
    s1.print();
    s2.print();


    (s1.*pf)();
    (s2.*pf)();

    (pp->*pf)();



    return 0;
}